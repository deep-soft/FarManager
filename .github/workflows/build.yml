name: Build

on:
  push:
    branches: master
  pull_request:
    branches: master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
#------------------------------------------------------------------------------
  code-style-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Run checks
        working-directory: far
        run: python tools/source_validator.py

#------------------------------------------------------------------------------
  changelog-hlf-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0'

# For "--property UseSharedCompilation=false", see
# https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow#no-code-found-during-the-build

      - name: Build and run ChangelogChecker
        working-directory: misc/build-checks/ChangelogChecker
        run: dotnet run --project ./ChangelogChecker.csproj --configuration Release --property UseSharedCompilation=false

      - name: Build and run HlfChecker
        working-directory: misc/build-checks/HlfChecker
        run: dotnet run --project ./HlfChecker.csproj --configuration Release --property UseSharedCompilation=false -- Verbose

#------------------------------------------------------------------------------
  build-msbuild:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        build: [
                 msbuild_cl_x64_debug,
                 msbuild_cl_x64_release,
                 msbuild_cl_x86_debug,
                 msbuild_cl_x86_release,
                 msbuild_cl_ARM64_release,
               ]

        include:
          - { build: msbuild_cl_x64_debug,     compiler: msbuild_cl, arch: amd64,       platform_sln: x64,   platform_name: x64,   build_config: Debug }
          - { build: msbuild_cl_x64_release,   compiler: msbuild_cl, arch: amd64,       platform_sln: x64,   platform_name: x64,   build_config: Release }
          - { build: msbuild_cl_x86_debug,     compiler: msbuild_cl, arch: amd64_x86,   platform_sln: Win32, platform_name: x86,   build_config: Debug }
          - { build: msbuild_cl_x86_release,   compiler: msbuild_cl, arch: amd64_x86,   platform_sln: Win32, platform_name: x86,   build_config: Release }
          - { build: msbuild_cl_ARM64_release, compiler: msbuild_cl, arch: amd64_arm64, platform_sln: ARM64, platform_name: ARM64, build_config: Release }

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        if: matrix.build == 'msbuild_cl_x64_debug'
        uses: github/codeql-action/init@v3
        with:
          languages: cpp

      - name: Set MSVC envrioment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Set environment for debug build
        if: matrix.build_config  == 'Debug'
        run: Add-Content -Path $env:GITHUB_ENV -Value "DEBUG=1"

      - name: Build (cl)
        working-directory: _build/vc
        run: msbuild -m /property:Configuration=${{ matrix.build_config }} /property:Platform=${{ matrix.platform_sln }} all.sln

      - name: Perform CodeQL Analysis
        if: matrix.build == 'msbuild_cl_x64_debug'
        uses: github/codeql-action/analyze@v3

      - name: Publish
        uses: actions/upload-artifact@v4
        with:
          name: Far.${{ matrix.build_config }}.${{ matrix.platform_name }}
          path: _build/vc/_output/product/${{ matrix.build_config }}.${{ matrix.platform_sln }}
          compression-level: 9

#------------------------------------------------------------------------------
  build-nmake:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        build: [
                 nmake_cl_x64_debug,
                 nmake_cl_x64_release,
                 nmake_cl_x86_debug,
                 nmake_cl_x86_release,
                 nmake_cl_ARM64_release,
                 nmake_clang_x64_debug,
                 nmake_clang_x64_release,
               ]

        include:
          - { build: nmake_cl_x64_debug,      compiler: nmake_cl,    arch: amd64,       build_config: Debug }
          - { build: nmake_cl_x64_release,    compiler: nmake_cl,    arch: amd64,       build_config: Release }
          - { build: nmake_cl_x86_debug,      compiler: nmake_cl,    arch: amd64_x86,   build_config: Debug }
          - { build: nmake_cl_x86_release,    compiler: nmake_cl,    arch: amd64_x86,   build_config: Release }
          - { build: nmake_cl_ARM64_release,  compiler: nmake_cl,    arch: amd64_arm64, build_config: Release }
          - { build: nmake_clang_x64_debug,   compiler: nmake_clang, arch: amd64,       build_config: Debug }
          - { build: nmake_clang_x64_release, compiler: nmake_clang, arch: amd64,       build_config: Release }

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        if: matrix.build == 'nmake_cl_x64_debug'
        uses: github/codeql-action/init@v3
        with:
          languages: cpp

      - name: Set MSVC envrioment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Set environment for debug build
        if: matrix.build_config  == 'Debug'
        run: Add-Content -Path $env:GITHUB_ENV -Value "DEBUG=1"

      - name: Build Far (cl)
        if: matrix.compiler  == 'nmake_cl'
        working-directory: far
        run: |
          cl.exe
          nmake /f makefile_vc

      - name: Build plugins (cl)
        if: matrix.compiler  == 'nmake_cl'
        working-directory: plugins
        run: nmake /f makefile_all_vc

      - name: Build Far (clang)
        if: matrix.compiler  == 'nmake_clang'
        working-directory: far
        run: |
          clang --version
          nmake /f makefile_vc CLANG=1

      - name: Build plugins (clang)
        if: matrix.compiler  == 'nmake_clang'
        working-directory: plugins
        run: nmake /f makefile_all_vc CLANG=1

      - name: Perform CodeQL Analysis
        if: matrix.build == 'nmake_cl_x64_debug'
        uses: github/codeql-action/analyze@v3

#------------------------------------------------------------------------------
  build-msys2:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        sys: [MINGW64, UCRT64, CLANG64, MINGW32, CLANG32]
        compiler: [gcc, clang]
        build_type: [Release, Debug]
        exclude:
          - sys: clang32
            compiler: gcc
          - sys: clang64
            compiler: gcc

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        if: matrix.sys == 'MINGW64' && matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: github/codeql-action/init@v3
        with:
          languages: cpp

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.sys }}
          pacboy: toolchain:p

      - name: Setup clang build
        if: matrix.compiler == 'clang'
        run: |
          echo "CLANG=1" >> "$GITHUB_ENV"
          pacboy --noconfirm -S --needed clang:p lld:p

      - name: Setup debug build
        if: matrix.build_type == 'Debug'
        run: |
          echo "DEBUG=1" >> "$GITHUB_ENV"
          echo "USE_LLD=1" >> "$GITHUB_ENV"
          pacboy --noconfirm -S --needed lld:p

      - name: Build Far
        working-directory: far
        run: |
          ${{ matrix.compiler }} --version
          mingw32-make -j $(($(nproc)+1)) -f makefile_gcc

      - name: Build plugins
        working-directory: plugins
        run: |
          ${{ matrix.compiler }} --version
          mingw32-make -j $(($(nproc)+1)) -f makefile_all_gcc

      - name: Perform CodeQL Analysis
        if: matrix.sys == 'MINGW64' && matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: github/codeql-action/analyze@v3

#------------------------------------------------------------------------------
  build-llvm-mingw:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        machine_target: [i686, x86_64, armv7, aarch64]
        c_lib: [msvcrt, ucrt]
        build_type: [Release, Debug]
        exclude:
          - machine_target: armv7
            c_lib: msvcrt
          - machine_target: aarch64
            c_lib: msvcrt

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        if: matrix.machine_target == 'x86_64' && matrix.c_lib == 'msvcrt' && matrix.build_type == 'Debug'
        uses: github/codeql-action/init@v3
        with:
          languages: cpp

      - name: Install luver
        uses: MunifTanjim/luver-action@v1

      - name: Download llvm-mingw
        id: download_llvm_mingw
        uses: robinraju/release-downloader@v1.9
        with:
          repository: "mstorsjo/llvm-mingw"
          latest: true
          preRelease: true
          fileName: "llvm-mingw-*-${{ matrix.c_lib }}-ubuntu-*-x86_64.tar.xz"

      - name: Install llvm-mingw
        run: |
          LLVM_MINGW=${{ fromJson(steps.download_llvm_mingw.outputs.downloaded_files)[0] }}
          tar -xf "$LLVM_MINGW"
          echo "${{ github.workspace }}/$(basename -s .tar.xz $LLVM_MINGW)/bin" >> $GITHUB_PATH

      - name: Setup build environment
        run: |
          echo "GCC_PREFIX=${{ matrix.machine_target }}-w64-mingw32-" >> "$GITHUB_ENV"
          echo "CLANG=1" >> "$GITHUB_ENV"
          echo "PYTHON=1" >> "$GITHUB_ENV"
          echo "SYS_LUA=1" >> "$GITHUB_ENV"
          echo "ENABLE_TESTS=0" >> "$GITHUB_ENV"
          [[ ${{ matrix.build_type }} == Debug ]] && echo "DEBUG=1" >> "$GITHUB_ENV" && echo "USE_LLD=1" >> "$GITHUB_ENV" || true

      - name: Build far
        working-directory: far
        run: |
          ${GCC_PREFIX}clang --version
          make -j $(($(nproc)+1)) -f makefile_gcc

      - name: Build plugins
        working-directory: plugins
        run: |
          ${GCC_PREFIX}clang --version
          luver install lua 5.1.5
          luver use 5.1.5
          make -j $(($(nproc)+1)) -f makefile_all_gcc

      - name: Perform CodeQL Analysis
        if: matrix.machine_target == 'x86_64' && matrix.c_lib == 'msvcrt' && matrix.build_type == 'Debug'
        uses: github/codeql-action/analyze@v3
